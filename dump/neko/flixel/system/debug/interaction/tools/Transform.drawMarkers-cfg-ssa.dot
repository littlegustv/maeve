digraph graphname {
	node [shape=plaintext];
n43638[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43638) BKNormal</td></tr>
	<tr><td port="e0" align="left">gfx.endFill()</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43637[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43637) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43636[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43636) BKNormal</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43635[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43635) BKConditional</td></tr>
	<tr><td port="e0" align="left">var tmp = this._markers[i].x - 1.5</td></tr>
	<tr><td port="e1" align="left">var tmp = this._markers[i].y - 1.5</td></tr>
	<tr><td port="e2" align="left">gfx.drawRect(tmp, tmp, 3.0, 3.0)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43634[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43634) BKConditional</td></tr>
	<tr><td port="e0" align="left">gfx.drawCircle(this._markers[i].x, this._markers[i].y, 2.7)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43633[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43633) BKNormal</td></tr>
	<tr><td port="e0" align="left">`1 = `1 + 1</td></tr>
	<tr><td port="e1" align="left">var i = `1 - 1</td></tr>
	<tr><td port="e2" align="left">var tmp = i == 0</td></tr>
	<tr><td port="e3" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43632[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43632) BKConditional</td></tr>
	<tr><td port="e0" align="left">break</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43631[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43631) BKNormal</td></tr>
	<tr><td port="e0" align="left">var tmp = ! ((`1 &lt; `))</td></tr>
	<tr><td port="e1" align="left">@:cond-branch tmp</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43630[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43630) BKLoopHead</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43629[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43629) BKNormal</td></tr>
	<tr><td port="e0" align="left">while ((true)) @:block 43631</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43628[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43628) BKSub</td></tr>
	<tr><td port="e0" align="left">var `1 = 0</td></tr>
	<tr><td port="e1" align="left">var ` = this._markers.length</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43627[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43627) BKFunctionEnd</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n43626[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(43626) BKFunctionBegin</td></tr>
	<tr><td port="e0" align="left">gfx.lineStyle(0.9, cast -65281, 1.0, false, cast 2, cast 2, null, null)</td></tr>
	<tr><td port="e1" align="left">gfx.beginFill(cast -65281, null)</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1[label=<<table BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<tr><td port="in" bgcolor="lightgray">(1) BKRoot</td></tr>
	<tr><td port="out"></td></tr>
</table>>];
n1:out -> n43626:in[label="CFGFunction"];
n43626:out -> n43628:in[label="CFGGoto"];
n43628:out -> n43629:in[label="CFGGoto"];
n43629:out -> n43630:in[label="CFGGoto"];
n43630:out -> n43631:in[label="CFGGoto"];
n43631:out -> n43633:in[label="CFGCondElse"];
n43631:out -> n43632:in[label="CFGCondBranch true"];
n43632:out -> n43637:in[label="CFGGoto"];
n43637:out -> n43638:in[label="CFGGoto"];
n43638:out -> n43627:in[label="CFGGoto"];
n43633:out -> n43635:in[label="CFGCondElse"];
n43633:out -> n43634:in[label="CFGCondBranch true"];
n43634:out -> n43636:in[label="CFGGoto"];
n43636:out -> n43630:in[label="CFGGoto"];
n43635:out -> n43636:in[label="CFGGoto"];
}
